diff --git a/src/libcmd/installables.cc b/src/libcmd/installables.cc
index 0fe956ec0..00c62b870 100644
--- a/src/libcmd/installables.cc
+++ b/src/libcmd/installables.cc
@@ -21,6 +21,7 @@
 #include "url.hh"
 #include "registry.hh"
 #include "build-result.hh"
+#include "config-global.hh"
 
 #include <regex>
 #include <queue>
@@ -45,6 +46,23 @@ void completeFlakeInputPath(
     }
 }
 
+std::string InstallablesSettings::getDefaultFlake(std::string_view url)
+{
+    std::string res = defaultFlake;
+    if (res == "") {
+        throw UsageError("don't know how to handle installable '%s' without flake URL, because the option 'default-flake' is not set", url);
+    }
+    return res;
+}
+
+InstallablesSettings installablesSettings;
+
+static GlobalConfig::Register rInstallablesSettings(&installablesSettings);
+
+const static std::regex attrPathRegex(
+    R"((?:[a-zA-Z0-9_"-][a-zA-Z0-9_".-]*(?:\^((\*)|([a-z]+(,[a-z]+)*)))?))",
+    std::regex::ECMAScript);
+
 MixFlakeOptions::MixFlakeOptions()
 {
     auto category = "Common flake-related options";
@@ -326,22 +344,37 @@ void completeFlakeRefWithFragment(
     /* Look for flake output attributes that match the
        prefix. */
     try {
+        bool isAttrPath = std::regex_match(prefix.begin(), prefix.end(), attrPathRegex);
         auto hash = prefix.find('#');
+
         if (hash == std::string::npos) {
             completeFlakeRef(completions, evalState->store, prefix);
-        } else {
+        }
+
+        if (isAttrPath || hash != std::string::npos) {
             completions.setType(AddCompletions::Type::Attrs);
 
-            auto fragment = prefix.substr(hash + 1);
+            auto fragment =
+                isAttrPath
+                ? prefix
+                : prefix.substr(hash + 1);
+
             std::string prefixRoot = "";
             if (fragment.starts_with(".")){
                 fragment = fragment.substr(1);
                 prefixRoot = ".";
             }
-            auto flakeRefS = std::string(prefix.substr(0, hash));
 
-            // TODO: ideally this would use the command base directory instead of assuming ".".
-            auto flakeRef = parseFlakeRef(fetchSettings, expandTilde(flakeRefS), absPath("."));
+            auto flakeRefS =
+                isAttrPath
+                ? std::string(installablesSettings.getDefaultFlake(prefix))
+                : expandTilde(std::string(prefix.substr(0, hash)));
+
+            // FIXME: do tilde expansion.
+            auto flakeRef = parseFlakeRef(
+                fetchSettings,
+                flakeRefS,
+                isAttrPath ? std::optional<std::string>{} : absPath("."));
 
             auto evalCache = openEvalCache(*evalState,
                 std::make_shared<flake::LockedFlake>(lockFlake(
@@ -352,6 +385,7 @@ void completeFlakeRefWithFragment(
             if (prefixRoot == "."){
                 attrPathPrefixes.clear();
             }
+
             /* Complete 'fragment' relative to all the
                attrpath prefixes as well as the root of the
                flake. */
@@ -377,7 +411,12 @@ void completeFlakeRefWithFragment(
                         /* Strip the attrpath prefix. */
                         attrPath2.erase(attrPath2.begin(), attrPath2.begin() + attrPathPrefix.size());
                         // FIXME: handle names with dots
-                        completions.add(flakeRefS + "#" + prefixRoot + concatStringsSep(".", evalState->symbols.resolve(attrPath2)));
+                        std::string resolvedAttrPath2 = prefixRoot + concatStringsSep(".", evalState->symbols.resolve(attrPath2));
+
+                        if (isAttrPath)
+                            completions.add(resolvedAttrPath2);
+                        else
+                            completions.add(flakeRefS + "#" + resolvedAttrPath2);
                     }
                 }
             }
@@ -414,7 +453,7 @@ void completeFlakeRef(AddCompletions & completions, ref<Store> store, std::strin
             if (!hasPrefix(prefix, "flake:") && hasPrefix(from, "flake:")) {
                 std::string from2(from, 6);
                 if (hasPrefix(from2, prefix))
-                    completions.add(from2);
+                    completions.add(from2 + "#");
             } else {
                 if (hasPrefix(from, prefix))
                     completions.add(from);
@@ -539,8 +578,13 @@ Installables SourceExprCommand::parseInstallables(
             }
 
             try {
-                auto [flakeRef, fragment] = parseFlakeRefWithFragment(
-                    fetchSettings, std::string { prefix }, absPath(getCommandBaseDir()));
+                bool isAttrPath = std::regex_match(std::string { prefix }, attrPathRegex);
+
+                auto [flakeRef, fragment] =
+                    isAttrPath
+                    ? std::pair { parseFlakeRef(fetchSettings, installablesSettings.getDefaultFlake(s), {}), std::string { prefix } }
+                    : parseFlakeRefWithFragment(fetchSettings, std::string { prefix }, absPath(getCommandBaseDir()));
+
                 result.push_back(make_ref<InstallableFlake>(
                         this,
                         getEvalState(),
diff --git a/src/libcmd/installables.hh b/src/libcmd/installables.hh
index bf5759230..e4cd3494a 100644
--- a/src/libcmd/installables.hh
+++ b/src/libcmd/installables.hh
@@ -13,6 +13,17 @@
 namespace nix {
 
 struct PackageInfo;
+struct InstallablesSettings : Config
+{
+    Setting<std::string> defaultFlake{this, "", "default-flake",
+        "The default flake URL when using the command line interface"};
+
+    std::string getDefaultFlake(std::string_view url);
+};
+
+extern InstallablesSettings installablesSettings;
+
+struct DrvInfo;
 
 enum class Realise {
     /**
diff --git a/src/nix/search.cc b/src/nix/search.cc
index 7f8504d3f..f6e0891c0 100644
--- a/src/nix/search.cc
+++ b/src/nix/search.cc
@@ -25,8 +25,9 @@ std::string wrap(std::string prefix, std::string s)
     return concatStrings(prefix, s, ANSI_NORMAL);
 }
 
-struct CmdSearch : InstallableValueCommand, MixJSON
+struct CmdSearch : SourceExprCommand, MixJSON
 {
+    std::string _installable{installablesSettings.defaultFlake};
     std::vector<std::string> res;
     std::vector<std::string> excludeRes;
 
@@ -42,6 +43,24 @@ struct CmdSearch : InstallableValueCommand, MixJSON
                 excludeRes.push_back(s);
             }},
         });
+
+        bool hasInstallable = false;
+
+        addFlag({
+            .longName = "installable",
+            .shortName = 'i',
+            .description = "Search within this installable",
+            .labels = {"installable"},
+            .handler = {[this, &hasInstallable](std::string ss) {
+                hasInstallable = true;
+                _installable = ss;
+            }},
+            .completer = completePath
+        });
+
+        if (hasInstallable && (file || expr)) {
+            throw UsageError("'--installable' cannot be used together with '--file' or '--expr'");
+        }
     }
 
     std::string description() override
@@ -64,14 +83,21 @@ struct CmdSearch : InstallableValueCommand, MixJSON
         };
     }
 
-    void run(ref<Store> store, ref<InstallableValue> installable) override
+    void run(ref<Store> store) override
     {
+        if (_installable == "" && ! file && ! expr) {
+            throw UsageError("nothing to search from, set 'default-flake' option or specify one of '--installable', '--file', '--expr'");
+        }
+
         settings.readOnlyMode = true;
         evalSettings.enableImportFromDerivation.setDefault(false);
 
+        auto installable = InstallableValue::require(
+            parseInstallable(store, (file || expr) ? "" : _installable));
+
         // Recommend "^" here instead of ".*" due to differences in resulting highlighting
         if (res.empty())
-            throw UsageError("Must provide at least one regex! To match all packages, use '%s'.", "nix search <installable> ^");
+            throw UsageError("Must provide at least one regex! To match all packages, use '%s'.", "nix search ^");
 
         std::vector<std::regex> regexes;
         std::vector<std::regex> excludeRegexes;
diff --git a/tests/functional/flakes/flakes.sh b/tests/functional/flakes/flakes.sh
index 26b91eda7..3aab7bb29 100755
--- a/tests/functional/flakes/flakes.sh
+++ b/tests/functional/flakes/flakes.sh
@@ -214,7 +214,7 @@ nix build -o "$TEST_ROOT/result" flake1#foo
 [[ -e "$TEST_ROOT/result/hello" ]]
 
 # Test packages.default.
-nix build -o "$TEST_ROOT/result" flake1
+nix build -o "$TEST_ROOT/result" flake1#
 [[ -e "$TEST_ROOT/result/hello" ]]
 
 nix build -o "$TEST_ROOT/result" "$flake1Dir"
diff --git a/tests/functional/search.sh b/tests/functional/search.sh
index 3fadecd02..604926718 100755
--- a/tests/functional/search.sh
+++ b/tests/functional/search.sh
@@ -5,43 +5,42 @@ source common.sh
 clearStoreIfPossible
 clearCache
 
-(( $(nix search -f search.nix '' hello | wc -l) > 0 ))
+(( $(nix search -f search.nix hello | wc -l) > 0 ))
 
 # Check descriptions are searched
-(( $(nix search -f search.nix '' broken | wc -l) > 0 ))
+(( $(nix search -f search.nix broken | wc -l) > 0 ))
 
 # Check search that matches nothing
-(( $(nix search -f search.nix '' nosuchpackageexists | wc -l) == 0 ))
+(( $(nix search -f search.nix nosuchpackageexists | wc -l) == 0 ))
 
 # Search for multiple arguments
-(( $(nix search -f search.nix '' hello empty | wc -l) == 2 ))
+(( $(nix search -f search.nix hello empty | wc -l) == 2 ))
 
 # Multiple arguments will not exist
-(( $(nix search -f search.nix '' hello broken | wc -l) == 0 ))
+(( $(nix search -f search.nix hello broken | wc -l) == 0 ))
 
 # No regex should return an error
-(( $(nix search -f search.nix '' | wc -l) == 0 ))
+(( $(nix search -f search.nix | wc -l) == 0 ))
 
 ## Search expressions
 
-# Check that empty search string matches all
-nix search -f search.nix '' ^ | grepQuiet foo
-nix search -f search.nix '' ^ | grepQuiet bar
-nix search -f search.nix '' ^ | grepQuiet hello
+nix search -f search.nix ^ | grepQuiet foo
+nix search -f search.nix ^ | grepQuiet bar
+nix search -f search.nix ^ | grepQuiet hello
 
 ## Tests for multiple regex/match highlighting
 
 e=$'\x1b' # grep doesn't support \e, \033 or even \x1b
 # Multiple overlapping regexes
-(( $(nix search -f search.nix '' 'oo' 'foo' 'oo' | grep -c "$e\[32;1mfoo$e\\[0;1m") == 1 ))
-(( $(nix search -f search.nix '' 'broken b' 'en bar' | grep -c "$e\[32;1mbroken bar$e\\[0m") == 1 ))
+(( $(nix search -f search.nix 'oo' 'foo' 'oo' | grep -c "$e\[32;1mfoo$e\\[0;1m") == 1 ))
+(( $(nix search -f search.nix 'broken b' 'en bar' | grep -c "$e\[32;1mbroken bar$e\\[0m") == 1 ))
 
 # Multiple matches
 # Searching for 'o' should yield the 'o' in 'broken bar', the 'oo' in foo and 'o' in hello
-(( $(nix search -f search.nix '' 'o' | grep -Eoc "$e\[32;1mo{1,2}$e\[(0|0;1)m") == 3 ))
+(( $(nix search -f search.nix 'o' | grep -Eoc "$e\[32;1mo{1,2}$e\[(0|0;1)m") == 3 ))
 # Searching for 'b' should yield the 'b' in bar and the two 'b's in 'broken bar'
 # NOTE: This does not work with `grep -c` because it counts the two 'b's in 'broken bar' as one matched line
-(( $(nix search -f search.nix '' 'b' | grep -Eo "$e\[32;1mb$e\[(0|0;1)m" | wc -l) == 3 ))
+(( $(nix search -f search.nix 'b' | grep -Eo "$e\[32;1mb$e\[(0|0;1)m" | wc -l) == 3 ))
 
 ## Tests for --exclude
 (( $(nix search -f search.nix ^ -e hello | grep -c hello) == 0 ))
