From eab457f8f0ebdcece617cb3f15f095a8f2d8f81a Mon Sep 17 00:00:00 2001
From: dramforever <dramforever@live.com>
Date: Mon, 19 Jul 2021 22:06:31 +0800
Subject: [PATCH] Support for default flake in new CLI

---
 src/libcmd/installables.cc | 71 ++++++++++++++++++++++++++++++++------
 src/libcmd/installables.hh | 10 ++++++
 src/nix/search.cc          | 27 ++++++++++++++-
 tests/completions.sh       |  2 +-
 tests/flakes.sh            |  2 +-
 tests/search.sh            | 24 ++++++-------
 5 files changed, 109 insertions(+), 25 deletions(-)

diff --git a/src/libcmd/installables.cc b/src/libcmd/installables.cc
index 03c8f82b3..c16e2efaf 100644
--- a/src/libcmd/installables.cc
+++ b/src/libcmd/installables.cc
@@ -23,6 +23,23 @@
 
 namespace nix {

+std::string InstallablesSettings::getDefaultFlake(std::string_view url)
+{
+    std::string res = defaultFlake;
+    if (res == "") {
+        throw UsageError("don't know how to handle installable '%s' without flake URL, because the option 'default-flake' is not set", url);
+    }
+    return res;
+}
+
+InstallablesSettings installablesSettings;
+
+static GlobalConfig::Register rInstallablesSettings(&installablesSettings);
+
+const static std::regex attrPathRegex(
+    R"((?:[a-zA-Z0-9_"-][a-zA-Z0-9_".-]*(?:\^((\*)|([a-z]+(,[a-z]+)*)))?))",
+    std::regex::ECMAScript);
+
 MixFlakeOptions::MixFlakeOptions()
 {
     auto category = "Common flake-related options";
@@ -265,15 +282,23 @@ void completeFlakeRefWithFragment(
     /* Look for flake output attributes that match the
        prefix. */
     try {
+        bool isAttrPath = std::regex_match(prefix.begin(), prefix.end(), attrPathRegex);
         auto hash = prefix.find('#');
-        if (hash == std::string::npos) {
-            completeFlakeRef(evalState->store, prefix);
-        } else {
-            completionType = ctAttrs;
-
-            auto fragment = prefix.substr(hash + 1);
-            auto flakeRefS = std::string(prefix.substr(0, hash));
-            auto flakeRef = parseFlakeRef(expandTilde(flakeRefS), absPath("."));
+        if (isAttrPath || hash != std::string::npos) {
+            auto fragment =
+                isAttrPath
+                ? prefix
+                : prefix.substr(hash + 1);
+
+            auto flakeRefS =
+                isAttrPath
+                ? std::string(installablesSettings.getDefaultFlake(prefix))
+                : std::string(prefix.substr(0, hash));
+
+            // FIXME: do tilde expansion.
+            auto flakeRef = parseFlakeRef(
+                flakeRefS,
+                isAttrPath ? std::optional<std::string>{} : absPath("."));
 
             auto evalCache = openEvalCache(*evalState,
                 std::make_shared<flake::LockedFlake>(lockFlake(*evalState, flakeRef, lockFlags)));
@@ -304,7 +329,13 @@ void completeFlakeRefWithFragment(
                         auto attrPath2 = (*attr)->getAttrPath(attr2);
                         /* Strip the attrpath prefix. */
                         attrPath2.erase(attrPath2.begin(), attrPath2.begin() + attrPathPrefix.size());
-                        completions->add(flakeRefS + "#" + concatStringsSep(".", evalState->symbols.resolve(attrPath2)));
+
+                        std::string resolvedAttrPath2 = concatStringsSep(".", evalState->symbols.resolve(attrPath2));
+
+                        if (isAttrPath)
+                            completions->add(resolvedAttrPath2);
+                        else
+                            completions->add(flakeRefS + "#" + resolvedAttrPath2);
                     }
                 }
             }
@@ -322,6 +353,8 @@ void completeFlakeRefWithFragment(
     } catch (Error & e) {
         warn(e.msg());
     }
+
+    completeFlakeRef(evalState->store, prefix);
 }
 
 void completeFlakeRef(ref<Store> store, std::string_view prefix)
@@ -341,7 +374,7 @@ void completeFlakeRef(ref<Store> store, std::string_view prefix)
             if (!hasPrefix(prefix, "flake:") && hasPrefix(from, "flake:")) {
                 std::string from2(from, 6);
                 if (hasPrefix(from2, prefix))
-                    completions->add(from2);
+                    completions->add(from2 + "#");
             } else {
                 if (hasPrefix(from, prefix))
                     completions->add(from);
@@ -749,6 +782,16 @@ FlakeRef InstallableFlake::nixpkgsFlakeRef() const
     return Installable::nixpkgsFlakeRef();
 }
 
+static std::tuple<FlakeRef, std::string, OutputsSpec> parseOnlyAttrPath(
+    const std::string &s) {
+    auto [fragment, outputsSpec] = parseOutputsSpec(s);
+    return {
+        parseFlakeRef(installablesSettings.getDefaultFlake(s), {}),
+        fragment,
+        outputsSpec
+    };
+}
+
 std::vector<std::shared_ptr<Installable>> SourceExprCommand::parseInstallables(
     ref<Store> store, std::vector<std::string> ss)
 {
@@ -804,7 +847,13 @@ std::vector<std::shared_ptr<Installable>> SourceExprCommand::parseInstallables(
             }
 
             try {
-                auto [flakeRef, fragment, outputsSpec] = parseFlakeRefWithFragmentAndOutputsSpec(s, absPath("."));
+                bool isAttrPath = std::regex_match(s, attrPathRegex);
+
+                auto [flakeRef, fragment, outputsSpec] =
+                    isAttrPath
+                    ? parseOnlyAttrPath(s)
+                    : parseFlakeRefWithFragmentAndOutputsSpec(s, absPath("."));
+
                 result.push_back(std::make_shared<InstallableFlake>(
                         this,
                         getEvalState(),
diff --git a/src/libcmd/installables.hh b/src/libcmd/installables.hh
index 948f78919..89d6221e0 100644
--- a/src/libcmd/installables.hh
+++ b/src/libcmd/installables.hh
@@ -12,6 +12,16 @@
 
 namespace nix {
 
+struct InstallablesSettings : Config
+{
+    Setting<std::string> defaultFlake{this, "", "default-flake",
+        "The default flake URL when using the command line interface"};
+
+    std::string getDefaultFlake(std::string_view url);
+};
+
+extern InstallablesSettings installablesSettings;
+
 struct DrvInfo;
 struct SourceExprCommand;
 
diff --git a/src/nix/search.cc b/src/nix/search.cc
index bdd45cbed..2e56a69a3 100644
--- a/src/nix/search.cc
+++ b/src/nix/search.cc
@@ -21,8 +21,9 @@ std::string wrap(std::string prefix, std::string s)
     return concatStrings(prefix, s, ANSI_NORMAL);
 }
 
-struct CmdSearch : InstallableCommand, MixJSON
+struct CmdSearch : SourceExprCommand, MixJSON
 {
+    std::string _installable{installablesSettings.defaultFlake};
     std::vector<std::string> res;
     std::vector<std::string> excludeRes;
 
@@ -38,6 +39,24 @@ struct CmdSearch : InstallableCommand, MixJSON
                 excludeRes.push_back(s);
             }},
         });
+
+        bool hasInstallable = false;
+
+        addFlag({
+            .longName = "installable",
+            .shortName = 'i',
+            .description = "Search within this installable",
+            .labels = {"installable"},
+            .handler = {[this, &hasInstallable](std::string ss) {
+                hasInstallable = true;
+                _installable = ss;
+            }},
+            .completer = completePath
+        });
+
+        if (hasInstallable && (file || expr)) {
+            throw UsageError("'--installable' cannot be used together with '--file' or '--expr'");
+        }
     }
 
     std::string description() override
@@ -62,9 +81,15 @@ struct CmdSearch : InstallableCommand, MixJSON
 
     void run(ref<Store> store) override
     {
+        if (_installable == "" && ! file && ! expr) {
+            throw UsageError("nothing to search from, set 'default-flake' option or specify one of '--installable', '--file', '--expr'");
+        }
+
         settings.readOnlyMode = true;
         evalSettings.enableImportFromDerivation.setDefault(false);
 
+        auto installable = parseInstallable(store, (file || expr) ? "" : _installable);
+
         // Empty search string should match all packages
         // Use "^" here instead of ".*" due to differences in resulting highlighting
         // (see #1893 -- libc++ claims empty search string is not in POSIX grammar)
diff --git a/tests/flakes/flakes.sh b/tests/flakes/flakes.sh
index 35cf4d8e7..89ad319e0 100644
--- a/tests/flakes/flakes.sh
+++ b/tests/flakes/flakes.sh
@@ -138,7 +138,7 @@ nix build -o $TEST_ROOT/result flake1#foo
 [[ -e $TEST_ROOT/result/hello ]]
 
 # Test packages.default.
-nix build -o $TEST_ROOT/result flake1
+nix build -o $TEST_ROOT/result flake1#
 [[ -e $TEST_ROOT/result/hello ]]
 
 nix build -o $TEST_ROOT/result $flake1Dir
diff --git a/tests/completions.sh b/tests/completions.sh
index 522aa1c86..41d85159d 100644
--- a/tests/completions.sh
+++ b/tests/completions.sh
@@ -58,5 +58,5 @@ NIX_GET_COMPLETIONS=3 nix build --option allow-import-from | grep -- "allow-impo
 # NIX_GET_COMPLETIONS=2 nix build --allow-import-from | grep -- "allow-import-from-derivation"

 # Attr path completions
-[[ "$(NIX_GET_COMPLETIONS=2 nix eval ./foo\#sam)" == $'attrs\n./foo#sampleOutput\t' ]]
+[[ "$(NIX_GET_COMPLETIONS=2 nix eval ./foo\#sam)" == $'filenames\n./foo#sampleOutput\t' ]]
 [[ "$(NIX_GET_COMPLETIONS=4 nix eval --file ./foo/flake.nix outp)" == $'attrs\noutputs\t' ]]
diff --git a/tests/search.sh b/tests/search.sh
index 1a98f5b49..df27e1a64 100644
--- a/tests/search.sh
+++ b/tests/search.sh
@@ -3,40 +3,40 @@ source common.sh
 clearStore
 clearCache
 
-(( $(nix search -f search.nix '' hello | wc -l) > 0 ))
+(( $(nix search -f search.nix hello | wc -l) > 0 ))
 
 # Check descriptions are searched
-(( $(nix search -f search.nix '' broken | wc -l) > 0 ))
+(( $(nix search -f search.nix broken | wc -l) > 0 ))
 
 # Check search that matches nothing
-(( $(nix search -f search.nix '' nosuchpackageexists | wc -l) == 0 ))
+(( $(nix search -f search.nix nosuchpackageexists | wc -l) == 0 ))
 
 # Search for multiple arguments
-(( $(nix search -f search.nix '' hello empty | wc -l) == 2 ))
+(( $(nix search -f search.nix hello empty | wc -l) == 2 ))
 
 # Multiple arguments will not exist
-(( $(nix search -f search.nix '' hello broken | wc -l) == 0 ))
+(( $(nix search -f search.nix hello broken | wc -l) == 0 ))
 
 ## Search expressions
 
 # Check that empty search string matches all
-nix search -f search.nix '' |grep -q foo
-nix search -f search.nix '' |grep -q bar
-nix search -f search.nix '' |grep -q hello
+nix search -f search.nix |grep -q foo
+nix search -f search.nix |grep -q bar
+nix search -f search.nix |grep -q hello
 
 ## Tests for multiple regex/match highlighting
 
 e=$'\x1b' # grep doesn't support \e, \033 or even \x1b
 # Multiple overlapping regexes
-(( $(nix search -f search.nix '' 'oo' 'foo' 'oo' | grep -c "$e\[32;1mfoo$e\\[0;1m") == 1 ))
-(( $(nix search -f search.nix '' 'broken b' 'en bar' | grep -c "$e\[32;1mbroken bar$e\\[0m") == 1 ))
+(( $(nix search -f search.nix 'oo' 'foo' 'oo' | grep -c "$e\[32;1mfoo$e\\[0;1m") == 1 ))
+(( $(nix search -f search.nix 'broken b' 'en bar' | grep -c "$e\[32;1mbroken bar$e\\[0m") == 1 ))
 
 # Multiple matches
 # Searching for 'o' should yield the 'o' in 'broken bar', the 'oo' in foo and 'o' in hello
-(( $(nix search -f search.nix '' 'o' | grep -Eoc "$e\[32;1mo{1,2}$e\[(0|0;1)m") == 3 ))
+(( $(nix search -f search.nix 'o' | grep -Eoc "$e\[32;1mo{1,2}$e\[(0|0;1)m") == 3 ))
 # Searching for 'b' should yield the 'b' in bar and the two 'b's in 'broken bar'
 # NOTE: This does not work with `grep -c` because it counts the two 'b's in 'broken bar' as one matched line
-(( $(nix search -f search.nix '' 'b' | grep -Eo "$e\[32;1mb$e\[(0|0;1)m" | wc -l) == 3 ))
+(( $(nix search -f search.nix 'b' | grep -Eo "$e\[32;1mb$e\[(0|0;1)m" | wc -l) == 3 ))
 
 ## Tests for --exclude
 (( $(nix search -f search.nix -e hello | grep -c hello) == 0 ))
-- 
2.36.1
