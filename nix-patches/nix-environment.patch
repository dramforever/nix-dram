diff --git a/src/libstore/globals.cc b/src/libstore/globals.cc
index f86c9cefa..520d157f6 100644
--- a/src/libstore/globals.cc
+++ b/src/libstore/globals.cc
@@ -113,6 +113,8 @@ void loadConfFile(AbstractConfig & config)
        ~/.nix/nix.conf or the command line. */
     config.resetOverridden();
 
+    settings.environment.overridden = settings.environment.hasInherited;
+
     auto files = settings.nixUserConfFiles;
     for (auto file = files.rbegin(); file != files.rend(); file++) {
         applyConfigFile(*file);
@@ -328,6 +330,60 @@ unsigned int MaxBuildJobsSetting::parse(const std::string & str) const
             throw UsageError("configuration setting '%s' should be 'auto' or an integer", name);
     }
 }
+void EnvironmentSetting::appendOrSet(Strings newValue, bool append)
+{
+    if (! append) {
+        for (auto & [name, oldValue] : oldEnvironment) {
+            if (oldValue.has_value()) {
+                setenv(name.c_str(), oldValue->c_str(), 1);
+            } else {
+                unsetenv(name.c_str());
+            }
+        }
+        oldEnvironment.clear();
+        value.clear();
+        hasInherited = false;
+    }
+
+    std::map<std::string, std::optional<std::string>> result;
+
+    for (auto & elem : newValue) {
+        size_t pos = elem.find('=');
+        if (pos == std::string::npos) {
+            // name
+            auto envValue = getEnv(elem.c_str());
+            if (envValue.has_value()) {
+                result.insert_or_assign(elem, std::optional { envValue.value() });
+                hasInherited = true;
+                overridden = true;
+            } else {
+                result.insert_or_assign(elem, std::nullopt);
+            }
+        } else {
+            // name=value
+            auto name = elem.substr(0, pos);
+            auto value = elem.substr(pos + 1);
+            result.insert_or_assign(name, std::optional { value });
+        }
+    }
+
+    for (auto i = value.begin(); i != value.end(); i ++) {
+        size_t pos = i->find('=');
+        std::string name = (pos == std::string::npos) ? *i : i->substr(0, pos);
+        if (result.count(name))
+            value.erase(i);
+    }
+
+    for (auto & [name, val] : result) {
+        oldEnvironment.emplace(name, getEnv(name));
+        if (val.has_value()) {
+            setenv(name.c_str(), val.value().c_str(), 1);
+            value.push_back(fmt("%1%=%2%", name, val.value()));
+        } else {
+            value.push_back(name);
+        }
+    }
+}
 
 static void preloadNSS()
 {
diff --git a/src/libstore/include/nix/store/globals.hh b/src/libstore/include/nix/store/globals.hh
index 84e8dccaa..3561ef411 100644
--- a/src/libstore/include/nix/store/globals.hh
+++ b/src/libstore/include/nix/store/globals.hh
@@ -42,6 +42,24 @@ const uint32_t maxIdsPerBuild =
 #endif
     ;
 
+struct EnvironmentSetting : public BaseSetting<Strings>
+{
+    std::map<std::string, std::optional<std::string>> oldEnvironment;
+    bool hasInherited = false;
+
+    EnvironmentSetting(Config * options,
+        const Strings & def,
+        const std::string & name,
+        const std::string & description,
+        const StringSet & aliases = {})
+        : BaseSetting<Strings>(def, true, name, description, aliases)
+    {
+        options->addSetting(this);
+    }
+
+    void appendOrSet(Strings newValue, bool append) override;
+};
+
 class Settings : public Config
 {
 
@@ -1354,6 +1372,23 @@ public:
           Default is 0, which disables the warning.
           Set it to 1 to warn on all paths.
         )"};
+
+    EnvironmentSetting environment{this, {}, "environment",
+        R"(
+          Extra environments variables to use. A list of items, each in the
+          format of:
+
+          - `name=value`: Set environment variable `name` to `value`.
+          - `name`: Inherit environment variable `name` from current
+            environment.
+
+          If the user is trusted (see `trusted-users` option), the daemon will
+          also have these environment variables set.
+
+          This option is useful for, e.g., setting `https_proxy` for
+          fixed-output derivations and substituter downloads in a multi-user
+          Nix installation.
+        )"};
 };
 
 // FIXME: don't use a global variable.
diff --git a/tests/functional/environment.nix b/tests/functional/environment.nix
new file mode 100644
index 000000000..2b0380ed7
--- /dev/null
+++ b/tests/functional/environment.nix
@@ -0,0 +1,16 @@
+{ var, value }:
+
+with import ./config.nix;
+
+mkDerivation {
+  name = "test";
+  buildCommand = ''
+    echo ${var} = "''$${var}"
+    echo -n "''$${var}" > "$out"
+  '';
+
+  impureEnvVars = [ var ];
+
+  outputHashAlgo = "sha256";
+  outputHash = builtins.hashString "sha256" value;
+}
diff --git a/tests/functional/environment.sh b/tests/functional/environment.sh
new file mode 100644
index 000000000..08c5a6e3f
--- /dev/null
+++ b/tests/functional/environment.sh
@@ -0,0 +1,43 @@
+source common.sh
+
+# Needs the config option 'environment' to work
+requireDaemonNewerThan "2.6.0pre20220109"
+
+varTest() {
+    local var="$1"; shift
+    local value="$1"; shift
+    nix build --no-link -vL --argstr var "$var" --argstr value "$value" --impure "$@" --file environment.nix
+    clearStore
+}
+
+clearStore
+startDaemon
+
+varTest env_name value --environment env_name=value
+env_name=value varTest env_name value --environment env_name
+
+echo 'environment = env_name set_in_config=daemon_value' >> "$NIX_CONF_DIR/nix.conf"
+env_name=daemon_value restartDaemon
+
+varTest env_name daemon_value
+env_name=client_value varTest env_name client_value
+varTest env_name client_value --environment env_name=client_value
+
+varTest set_in_config daemon_value
+set_in_config=client_value varTest set_in_config daemon_value
+varTest set_in_config client_value --environment set_in_config=client_value
+
+sed -i -e '/^trusted-users =/d' "$NIX_CONF_DIR/nix.conf"
+
+env_name=daemon_value restartDaemon
+
+varTest env_name daemon_value --environment env_name=client_value
+env_name=client_value varTest env_name daemon_value --environment env_name
+
+[[ "$(nix show-config | grep 'environment ='
+    )" == 'environment = env_name set_in_config=daemon_value' ]]
+
+[[ "$(env_name=client_value nix show-config | grep 'environment ='
+  )" == 'environment = env_name=client_value set_in_config=daemon_value' ]]
+
+killDaemon
diff --git a/tests/functional/meson.build b/tests/functional/meson.build
index bd87e9b34..57593b71c 100644
--- a/tests/functional/meson.build
+++ b/tests/functional/meson.build
@@ -170,6 +170,7 @@ suites = [
       'extra-sandbox-profile.sh',
       'help.sh',
       'symlinks.sh',
+      'environment.sh',
     ],
     'workdir': meson.current_source_dir(),
   },
